@page "/todomatrix"

<PageTitle>To Do Lists</PageTitle>

@using DataModels.Models
@using UI.ToDoComponents
@using UIServices
@inject IUIToDoListService ToDoCRUDService

<h1 class="text-center text-decoration-underline todo-title">The ToDo List Matrix</h1>
<p class="text-center">A todo list mixed with the Isenhower matrix.</p>
<p class="text-center">This list is saved to an sql server via an api.</p>
<hr />

<pannel class="row">
	@if (ToDos.Count > 0)
	{


		@foreach (var list in ToDos)
		{

			<card class="card todolist col-12 col-md-6 my-2">
				<h3 class="text-center list-header py-3">@list.Title.ToUpper()</h3>

				@if (ToDos.Count > 0 && ToDos != null)
				{
					currentList = list;
					<ToDoProgress toDoList="@list"></ToDoProgress>
				}

				<EditForm class="form-inline my-2" Model="@newItem">
					<div class="row me-0">
						<div class="col-10">
							<InputTextArea class="form-control col-10" placeholder="New Task..." @bind-Value="newItem.Title" />
						</div>
						<button class="btn btn-outline-primary float-end col-2" type="submit"
						@onclick="(() => AddItems(list))">
							<span class="add-item fw-bold">Add Item</span>
							<i class="add-symbol fa fa-plus fw-bold"></i>
						</button>
					</div>
				</EditForm>

				<ul class="list-group">
					@foreach (var item in list.ToDoItems)
					{
						<li class="list-group-item my-1">


							<span @onclick="(() => UpdateItem(item))">
								<EditForm class="form-check-inline pe-1" Model="@item">
									<InputCheckbox class="form-check"
									   @bind-Value="item.IsComplete" />
								</EditForm>
								<span class="position-absolute">
									@if (item.IsComplete)
									{
										<del class="text-muted">@item.Title</del>
									}
									else
									{
										@item.Title
									}
								</span>
								<button class="btn btn-outline-danger float-end todo-item-button fw-bold" type="button"
							@onclick="(() => Delete(list, item))">
									<i class="fa fa-trash"></i>
									<span class="item-button-text">Delete</span>
								</button>
							</span>

							<ToDoEditModalComponent CurrentItem="@item" SaveChanges="UpdateItemData"></ToDoEditModalComponent>

							@if (item.Description.Length > 0)
							{
								<div class="border-top pt-2">
									<p class="ms-3 mb-0 text-muted">Description:</p>
									<ul class="list-group">
										<li class="list-group-item">@item.Description</li>
									</ul>
								</div>
							}
						</li>
					}
				</ul>
			</card>
		}
	}
	else
	{
		<p>Loading....</p>
	}
</pannel>

@code {

	private List<ToDoList> ToDos = new List<ToDoList>();
	private ToDoList currentList = new ToDoList();
	private ToDoList newList = new ToDoList();
	private ToDoItem newItem = new ToDoItem();

	protected override async Task OnInitializedAsync()
	{
		await GetToDoLists();
	}

	private async Task GetToDoLists()
	{
		ToDos = await ToDoCRUDService.GetToDoLists();
	}

	private void AddItems(ToDoList list)
	{
		list.ToDoItems.Add(newItem);
		ToDoCRUDService.AddItems(list.ToDoListId, list.ToDoItems);
		newItem = new ToDoItem();
	}

	public void UpdateItem(ToDoItem item)
	{
		item.IsComplete = !item.IsComplete;
		ToDoCRUDService.UpdateItem(item);
	}

	private void UpdateItemData(ToDoItem item)
	{
		ToDoCRUDService.UpdateItem(item);
	}

	private void Delete(ToDoList list, ToDoItem item)
	{
		ToDoCRUDService.Delete(list.ToDoListId, item.ToDoItemId);
		list.ToDoItems.Remove(item);
	}

}

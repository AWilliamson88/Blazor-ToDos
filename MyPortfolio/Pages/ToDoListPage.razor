@page "/todomatrix"

<PageTitle>To Do Lists</PageTitle>

@using DataModels.Models
@using UI.ToDoComponents
@using UIServices
@inject IUIToDoListService ToDoCRUDService

<h1>Welcome To The ToDo List Page</h1>

<pannel class="row">
	@foreach (var list in ToDos)
	{
		
		<card class="card todolist col-md-6">
			<h3 class="text-center">@list.Title.ToUpper()</h3>

			@if (ToDos.Count > 0 && ToDos != null)
			{
				currentList = list;
				<ToDoProgress toDoList="@list"></ToDoProgress>
			}

			<EditForm class="form-inline my-2" Model="@newItem">
				<div class="row me-0">
					<div class="col-10">
						<InputTextArea class="form-control mx-2 col-10" placeholder="New Task..." @bind-Value="newItem.Title" />
					</div>
					<button class="btn btn-outline-primary float-end col-2" type="submit" 
						@onclick="(() => AddItems(list))">Add Task</button>
				</div>
			</EditForm>

			<ul class="list-group">
				@foreach (var item in list.ToDoItems)
				{
					<li class="list-group-item list-group-item-success my-1">
						<span class="todo-item" @onclick="(() => UpdateItem(item))" >
				<EditForm class="form-check-inline pe-2" Model="@item">
						<InputCheckbox class="form-check position-absolute top-50 translate-middle-y " 
						@bind-Value="item.IsComplete" />
				</EditForm>
						<span class="todoitem todoitem-name position-absolute top-50 translate-middle-y">
							@if (item.IsComplete)
							{
								<del>@item.Title</del>
							}
							else
							{
								@item.Title
							}
						</span>
						</span>
						<span class="todoitem todoitem-del">
							<button class="btn btn-outline-Warning float-end" type="button" 
							@onclick="(() => Delete(list, item))">Del</button>
						</span>
					</li>
				}
			</ul>
		</card>
	}
</pannel>

@code {

	private List<ToDoList> ToDos = new List<ToDoList>();
	private ToDoList currentList = new ToDoList();
	private ToDoList newList = new ToDoList();
	private ToDoItem newItem = new ToDoItem();

	protected override async Task OnInitializedAsync()
	{
		await GetToDoLists();
	}

	private async Task GetToDoLists()
	{
		ToDos = await ToDoCRUDService.GetToDoLists();
	}

	private void AddItems(ToDoList list)
	{
		list.ToDoItems.Add(newItem);
		ToDoCRUDService.AddItems(list.ToDoListId, list.ToDoItems);
		newItem = new ToDoItem();
	}

	public void UpdateItem(ToDoItem item)
	{
		item.IsComplete = !item.IsComplete;
		ToDoCRUDService.UpdateItem(item);
	}

	private void Delete(ToDoList list, ToDoItem item)
	{
		ToDoCRUDService.Delete(list.ToDoListId, item.ToDoItemId);
		list.ToDoItems.Remove(item);
	}

}
